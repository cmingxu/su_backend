#= require jquery
#= require angular
#= require angular-resource
#= require angular-ui-router
#= require angular-cookies
#= require angular-local-storage
#= require angular-rails-templates
#= require_tree ../templates


building = angular.module "building", ['ngResource', 'ui.router', 'templates', 'ngCookies', 'LocalStorageModule' ]

building.config ['$httpProvider', ($httpProvider) ->
  $httpProvider.defaults.headers.common['Content-Type'] = 'application/json'
  $httpProvider.defaults.headers.common['X-CSRF-Token'] = $('meta[name=csrf-token]').attr('content')
]

building.config ['$stateProvider', '$urlRouterProvider', ($stateProvider, $urlRouterProvider) ->

  $urlRouterProvider.otherwise '/local'

  $stateProvider.state 'local',
    url: "/local"
    controller: 'Local'
    templateUrl: '/assets/local.html'

  $stateProvider.state 'system',
    url: "/system"
    controller: 'System'
    templateUrl: '<%= asset_path 'system.html' %>'

  $stateProvider.state 'remote',
    url: "/remote"
    controller: 'Remote'
    templateUrl: '<%= asset_path 'remote.html' %>'

  $stateProvider.state 'login',
    url: "/login"
    controller: 'Login'
    templateUrl: '<%= asset_path 'login.html' %>'

  $stateProvider.state 'register',
    url: "/register"
    controller: 'Register'
    templateUrl: '<%= asset_path 'register.html' %>'
]


building.factory "Entity", ($resource) ->
  $resource("/api/entities/:id", {id: '@id'}, {
    index:
      method: 'GET'
      isArray: true
  })

building.constant 'CURRENT_USER', 'currentUser'

building.factory 'CurrentUser', ['$cookies', 'localStorageService', 'CURRENT_USER', ($cookies, localStorageService, CURRENT_USER) ->
    currentUser = {}

    currentUser.getUserInfo  = -> localStorageService.get(CURRENT_USER)
    currentUser.setUserInfo  = (userInfo) -> localStorageService.set(CURRENT_USER, userInfo)
    currentUser.isLogin      = -> $cookies.get('auth_token')? #and localStorageService.get(CURRENT_USER)?
    currentUser.destroy      = -> localStorageService.remove(CURRENT_USER)
    currentUser.hasAuthToken = -> $cookies.get('auth_token')?
    currentUser.authToken    = -> $cookies.get('auth_token')

    currentUser.missingAccountInfo = ->
      currentUser = localStorageService.get(CURRENT_USER)
      (currentUser.email) is null

    currentUser
  ]


building.controller "Local", ['$scope', 'CurrentUser', '$cookies', ($scope, CurrentUser, $cookies) ->

  $scope.c = ->
    $cookies.getAll()

  $scope.upload_local_model = (model) ->
    alert(model)
    alert(CurrentUser.authToken())

    $scope.bridge "upload_local_model", model + "||" + CurrentUser.authToken()
]

building.controller "Remote", ['$scope', ($scope) ->
]

building.controller "Login", ['$scope', '$http', ($scope, $http) ->
  $scope.current_user = {}
  $scope.login = ()->
    if !$scope.current_user.email or !$scope.current_user.email.match(/^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i)
      alert "邮箱格式不正确"
      return
    if !$scope.current_user.password
      alert "密码不正确"
      return

    $http.post("/api/users/login", {user: $scope.current_user}).success (response) ->
      if response.status == "fail"
        alert response.message
      else
        window.location.hash = "/local"
]

building.controller "Register", ['$scope', '$http', ($scope, $http) ->
  $scope.current_user = {}
  $scope.register = ()->
    if !$scope.current_user.email or !$scope.current_user.email.match(/^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i)
      alert "邮箱格式不正确"
      return
    if !$scope.current_user.password
      alert "密码不正确"
      return
    if $scope.current_user.password != $scope.current_user.password_confirmation
      alert "两次密码不一致"
      return

    $http.post("/api/users", {user: $scope.current_user}).success (response) ->
      if response.status == "fail"
        alert response.message
      else
        window.location.hash = "/local"

]

building.controller "System", ['$scope', '$http', '$interval', "Entity", ($scope, $http, $interval, Entity) ->
  $scope.current_entity = {}
  $scope.system_models = {}
  Entity.index (data) ->
    $scope.system_models = data

]

building.controller "Main", ['$scope', '$http', '$timeout', "Entity", "CurrentUser", ($scope, $http, $timeout, Entity, CurrentUser) ->
  $scope.CurrentUser = CurrentUser
  $scope.current_entity = {}
  $scope.local_models = []

  $scope.bridge = (action, param) ->
    window.location.href = "skp:" + action + "@" + param

  $scope.current_component_definition_name_change = () ->
    $scope.bridge "current_component_definition_name_change", $scope.current_entity.name

  $scope.remove_local_model = (model_name) ->
    if confirm("永久删除模型" + model_name + "么?")
      $scope.bridge "remove_local_component_definition", model_name

  $scope.download_from_system = (skp_file) ->
    $scope.bridge "download_from_system", skp_file
    window.location.hash = "/local"

  $scope.replace_by_name = (model_name) ->
    $scope.bridge "replace_by_name", model_name

  $scope.sign_out = ->
    $http.delete("/api/users/sign_out").success (response) ->
      window.location.hash = "/login"

  $timeout ()->
    $scope.bridge 'initialization'
    , 100
]

